#!/bin/sh /etc/rc.common
# Copyright (C) 2016 OpenWrt.org

START=98
STOP=20
PROG=/usr/bin/knxd
USE_PROCD=1
INI="/tmp/etc/knxd.ini"

add_sec(){
	local name=$(echo "$1" | tr "_" "-")
	echo "[$name]" >> $INI
}

add_str(){
	local cfg=$1
	local name=$2
	local value=$3
	local rename=$(echo "$name" | tr "_" "-")
	[ -z "$value" ] && config_get value $cfg $name
	[ -z "$value" ] || echo "$rename = $value" >> $INI
}

add_bool(){
	local cfg=$1
	local name=$2
	local rename=$(echo "$name" | tr "_" "-")
	config_get value $cfg $name
	[ "$value" = "0" ] && echo "$rename = false" >> $INI
	[ "$value" = "1" ] && echo "$rename = true" >> $INI
}

add_driver() {
	local cfg=$1
	config_get driver $cfg driver
	[ -z "$driver" ] && return 0
	add_sec "$cfg"
	#Drivers
	add_str $cfg driver
	#Common options
	add_bool $cfg ignore
	add_bool $cfg may_fail
	add_str $cfg retry_delay
	add_str $cfg max_retry
	add_str $cfg send_timeout
	add_str $cfg send_retries
	add_str $cfg debug
	#ip
	if [ "$driver" = "ip" ]; then
		add_str $cfg multicast_address
		add_str $cfg port
		config_get interface $cfg ip_interface
		[ -z "$interface" ] || network_get_device ifname "$interface"
		add_str $cfg interface $ifname
	fi
	if [ "$driver" = "ipt" \
	-o "$driver" = "iptn" \
	-o "$driver" = "tpuarttcp" \
	-o "$driver" = "ncn5120tcp" \
	-o "$driver" = "ft12tcp" \
	-o "$driver" = "ft12cemitcp" ]; then
		add_str $cfg ip_address
		add_str $cfg dest_port
	fi
	if [ "$driver" = "ipt" \
	-o "$driver" = "iptn" ]; then
		add_str $cfg src_port
		add_str $cfg heartbeat_timer
		add_str $cfg heartbeat_retries
	fi
	if [ "$driver" = "iptn" ]; then
		add_bool $cfg nat
		add_str $cfg nat_ip
		add_str $cfg data_port
	fi
	if [ "$driver" = "tpuart" \
	-o "$driver" = "ncn5120" ]; then
		add_str $cfg device
	fi
	if [ "$driver" = "usb" ]; then
		config_get bus $cfg usb_bus
		add_str $cfg bus $bus
		config_get device $cfg usb_device
		add_str $cfg device $device
		config_get config $cfg usb_config
		add_str $cfg config $config
		config_get interface $cfg usb_interface
		add_str $cfg interface $interface
		config_get setting $cfg usb_setting
		add_str $cfg setting $setting
		config_get version $cfg usb_version
		add_str $cfg version $version
	fi
	if [ "$driver" = "tpuart" \
	-o "$driver" = "ncn5120" \
	-o "$driver" = "ft12" \
	-o "$driver" = "ft12cemi" ]; then
		config_get device $cfg tty_device
		add_str $cfg device $device
		add_str $cfg baudrate
	fi
	#More common options
	add_bool $cfg ack_group
	add_bool $cfg ack_individual
	add_bool $cfg reset
	add_bool $cfg monitor
}

add_server() {
	local cfg=$1
	config_get server $cfg server
	[ -z "$server" ] && return 0
	add_sec "$cfg"
	#Server
	add_str $cfg server	
	#Common options
	add_bool $cfg ignore
	add_bool $cfg may_fail
	add_str $cfg retry_delay
	add_str $cfg max_retry
	add_str $cfg send_timeout
	add_str $cfg debug
	if [ "$server" = "knxd_tcp" \
	-o "$server" = "ets_router" ]; then
		add_str $cfg port
		config_get interface $cfg interface
		[ -z "$interface" ] || network_get_device ifname "$interface"
		add_str $cfg interface $ifname
	fi
	if [ "$server" = "knxd_tcp" ]; then
		add_str $cfg ip_address
	fi
	if [ "$server" = "ets_router" ]; then
		add_str $cfg multicast_address
		add_str $cfg tunnel
		add_str $cfg router
		add_bool $cfg discover
		add_bool $cfg multi_port
		add_str $cfg name
	fi
	if [ "$server" = "knxd_unix" ]; then
		add_str $cfg path
	fi
}

add_dbg() {
	local cfg=$1
	add_sec "$cfg"
	add_str $cfg name
	add_str $cfg error_level
	add_str $cfg trace_mask
	add_bool $cfg timestamps
}

add_main() {
	local cfg=$1
	add_sec "main"
	add_bool $cfg background
	add_str $cfg addr
	add_str $cfg client_addrs
	add_str $cfg connections
	add_str $cfg logfile
	add_str $cfg name
	add_str $cfg cache
	add_str $cfg force_broadcast
	add_str $cfg debug
}

start_service() {
	. /lib/functions/network.sh
	>$INI
	config_load knxd
	config_get cfg_source args cfg_source
	if [ "$cfg_source" = "file" ]; then
		config_get INI args cfg_path
	else
		config_foreach add_driver driver
		config_foreach add_server server
		config_foreach add_dbg debug
		config_foreach add_main main
	fi
	procd_open_instance
	procd_set_param command $PROG $INI
	procd_set_param respawn
	procd_close_instance
}
stop_service() {
	killall knxd
}

reload_service()
{
	restart
}

service_triggers()
{
	procd_add_reload_trigger knxd
}
